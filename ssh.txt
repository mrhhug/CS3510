SSH (Secure Shell aka Secure Socket Shell) - is a network protocol to establish a secure channel between two computers for data exchange
SSH strive to create confidential connections across the Net

	replaces telnet and rlongin - SSH does not send passwords in plaintext
	operates at application layer
	remote command line login.
	connecting via a secure connection over an unsecure channel.
	client server model - client program is needed by accesor, daemon service is need by accessee
	An SSH server, by default, listens on the standard TCP port 22 - this is often changed for security purposes
	
	The Secure Shell Charter (SSH Charter) is a set of papers produced by the Secure Shell Working Group (SSH Working Group), an organization dedicated to updating and standardizing the popular Unix-based interface and protocol known as Secure Shell (SSH or secsh). The SSH Working Group is administered by the Internet Engineering Task Force (IETF), an international body that defines standard network operating protocols.
	http://searchenterpriselinux.techtarget.com/definition/Secure-Shell-Charter

	SSH is actually a suite of three utilities - slogin, ssh, and scp - that are secure versions of the earlier UNIX utilities, rlogin, rsh, and rcp. SSH commands are encrypted and secure in several ways. Both ends of the client/server connection are authenticated using a digital certificate, and passwords are protected by being encrypted.
	http://searchsecurity.techtarget.com/definition/Secure-Shell
	
	To paraphrase the README file:
	Secure Shell is a program to log into another computer over a network, to execute commands in a remote machine, and to move files from one machine to another. It provides strong authentication and secure communications over unsecure channels. It is intended as a replacement for telnet, rlogin, rsh, and rcp. For SSH2, there is a replacement for FTP: sftp.
	http://www.onsight.com/faq/ssh/ssh-faq-1.html#ss1.1
	1.2 How widespread is its use?
	The most current figures available are over 2 million Secure Shell users in over 60 countries. This is not an accurate amount, but an estimate. It also does not necessarily include the different implementations of Secure Shell for different operating systems.
	1.9 Who maintains Secure Shell?
	SSH Communications Security, is the developer of Secure Shell (secsh) protocol and maintains the releases of SSH1 and SSH2. The IETF maintains the Secure Shell standards, which is vendor-neutral. The standards are currently in draft form; once there are two independent implementations available, then they can be submitted as an RFC.
	There are currently several implementors, both freeware and commercial, of Secure Shell. 
	1.10.2 Cryptography laws
	In some countries, particularly France, Russia, Iraq, and Pakistan, it may be illegal to use any encryption at all without a special permit.
	If you are in the United States, you should be aware that, while ssh was written outside the United States using information publicly available everywhere, the US Government may consider it a criminal offence to export this software from the US once it has been imported, including putting it on a ftp site. Contact the Bureau of Export Administration, which is under the Department of Commerce.
	There's a really good link that keeps up to date with the Wassenaar Agreement and the cryptography laws throughout the world. Check out Bert-Jaap Koops Crypto Law Survey. 
	
	encryptopn
		public key crytography
		several ways one is to use automatically generated public-private key pairs to simply encrypt a network connection, and then use password authentication to log on.
		when a public key is present on the remote end and the matching private key is present on the local end, typing in the password is no longer required
		 Diffie-Hellman
		 
		 When using ssh's slogin (instead of rlogin) the entire login session, including transmission of password, is encrypted
		 ; therefore it is almost impossible for an outsider to collect passwords.
		 http://www.webopedia.com/TERM/S/SSH.html
		 
		 encrypton algorythms
			 ciphers for encryption
			 	3DES
				Blowfish
				Twofish	
				Arcfour
				Cast128-cbc	
			 
			 ciphers for authentication:
				DSA

		 
	systems
		On Unix-like systems, the list of authorized public keys is stored in the home directory of the user that is allowed to log in remotely, in the file ~/.ssh/authorized_keys
			file is ownly wriatble by owner and root (not by ssh itself)
			
	uses
		SSH is typically used to log into a remote machine and execute commands, but it also supports tunneling, forwarding TCP ports and X11 connections; (not exactly like VPN)
		transfer files using the associated SSH file transfer (SFTP) or secure copy (SCP) protocols
			backups - rsync
			communication across firewall
	implamentations
		OpenSSH was the single most popular SSH implementation, coming by default in a large number of operating systems. OSSH meanwhile has become obsolete.
	
	clients
		SSH clients
			OSx
			windows
			Cygwin
			BSD
			Linux
			Solaris
			Java
			Windows Mobile
			HP-UX
			iOS
			Android
		SSH servers
			Mac OS X
			Windows
			Cygwin
			BSD
			Linux
			Solaris
			Java
			HPUX
			iOS - jailbroken
			Android
			
The SSH-2 protocol has an internal architecture (defined in RFC 4251) with well-separated layers, namely:
	transport layer
		The transport layer (RFC 4253). This layer handles initial key exchange as well as server authentication, and sets up encryption, compression and integrity verification.
		It exposes to the upper layer an interface for sending and receiving plaintext packets with sizes of up to 32,768 bytes each (more can be allowed by the implementation).
		The transport layer also arranges for key re-exchange, usually after 1 GB of data has been transferred or after 1 hour has passed, whichever occurs first.
	 user authentication layer
	 	The user authentication layer (RFC 4252). This layer handles client authentication and provides a number of authentication methods.
	 	Authentication is client-driven: when one is prompted for a password, it may be the SSH client prompting, not the server.
	 	The server merely responds to the client's authentication requests. Widely used user-authentication methods include the following:
	 		password: a method for straightforward password authentication, including a facility allowing a password to be changed. Not all programs implement his method.
	 		publickey: a method for public key-based authentication, usually supporting at least DSA or RSA keypairs, with other implementations also supporting X.509 certificates.
	 		keyboard-interactive (RFC 4256): a versatile method where the server sends one or more prompts to enter information and the client displays them and sends back responses keyed-in by the user. Used to provide one-time password authentication such as S/Key or SecurID.
	 		GSSAPI authentication methods which provide an extensible scheme to perform SSH authentication using external mechanisms such as Kerberos 5 or NTLM, providing single sign on capability to SSH sessions. These methods are usually implemented by commercial SSH implementations for use in organizations, though OpenSSH does have a working GSSAPI implementation.
	 The connection layer
	 	This layer defines the concept of channels, channel requests and global requests using which SSH services are provided. 
	 	A single SSH connection can host multiple channels simultaneously, each transferring data in both directions. 
	 	Channel requests are used to relay out-of-band channel-specific data, such as the changed size of a terminal window or the exit code of a server-side process.
	 	The SSH client requests a server-side port to be forwarded using a global request. Standard channel types include:
	 		shell for terminal shells, SFTP and exec requests (including SCP transfers)
	 		direct-tcpip for client-to-server forwarded connections
	 		forwarded-tcpip for server-to-client forwarded connections
	 The SSHFP DNS record (RFC 4255) provides the public host key fingerprints in order to aid in verifying the authenticity of the host.
